# import re
from flask import Flask
from flask import render_template #handles html

#imports from a separate code that generated the bokeh ploth
from pandas_datareader import data
import datetime
from bokeh.plotting import figure, show, output_file
from bokeh.embed import components #to grab the content of html generated by bokeh
from bokeh.resources import CDN
import pandas

app=Flask(__name__) #our flask app

##test before introducing render_template
# @app.route('/')
# # @app.route("/about/") #means the content is in about page
# def home():
#     return "Website home page goes here!"


# @app.route("/about")
# def about():
#     return "this is the about page"


##using render template and creating template folder
##to keep html files
@app.route("/plot")
def plot():

    start = datetime.datetime(2021,1,1) #setting a start data of our data to be fetched
    end = datetime.datetime(2022,1,1)

    df=data.DataReader(name="FB",data_source="yahoo", start=start, end=end) #creating a dataframe object of our data

    #simple fn to flag increase or decrease when 2 values are passed
    def inc_dec(c, o):
        if c > o:
            value = "Increase"
        elif c < o:
            value = "Decrease"
        else:
            value="Equal"
        return value

    #we are creating a new column, Status, but through iteration
    #for each of the values in colum ,close and open, pass those values to our fn
    df["Status"]=[inc_dec(c, o) for c, o in zip(df.Close, df.Open)]

    df["Middle"] = (df.Open + df.Close)/2
    df["Height"] = abs(df.Close - df.Open)  

    hours_12 = 12*60*60*1000

    #creating our figure object x axis will take a datetime obj 
    p=figure(x_axis_type='datetime', width=1000, height=300, sizing_mode='scale_width')
    p.title="Candlestick Chart" #we giving it a title
    p.grid.grid_line_alpha=0.3 #controlling grid appearance

    ###segment takes the following parameters
    ##x0 = date column,  y0 = df.High, a col
    ##x1 same as x0 = date column, y1 = df.low 
    ##so only y values change
    ##segment first so as to allow rect to come in front
    p.segment(df.index, df.High, df.index, df.Low, color='black') 

    ##hardcodding the statement
    # p.quad(df.index[df.Close > df.Open], (df.Open + df.Close)/2,
    #        hours_12, abs(df.Open-df.Close), fill_color="green", line_color="black")

    # p.quad(df.index[df.Close < df.Open], (df.Open + df.Close)/2,
    #        hours_12, abs(df.Open-df.Close), fill_color="green", line_color="black")

    ##using variables to hold the diff of the values of the close and open cell
    # p.quad(date_increase, (df.Open + df.Close)/2,
    #        hours_12, abs(df.Open-df.Close), fill_color="green", line_color="black")

    # p.quad(date_decrease, (df.Open + df.Close)/2,
    #        hours_12, abs(df.Open-df.Close), fill_color="green", line_color="black")

    ##for when Close > Open the first instance will apply else the second does
    ##x is datetime object of open or close
    ##y is value of open and close on a particular date
    ##width is a point on y, where close and open values averages which was used as width
    ##height is the difference on y, values of open and close that's is a difference of open and close 

    p.rect(df.index[df.Status=="Increase"], df.Middle[df.Status=="Increase"],
        hours_12, df.Height[df.Status=='Increase'], fill_color="#ff4000", line_color="black")

    p.rect(df.index[df.Status=="Decrease"], df.Middle[df.Status=="Decrease"],
        hours_12, df.Height[df.Status=='Decrease'], fill_color="#00ff00", line_color="black")

    script1, div1 = components(p) #script and html variable to hold the entire bokeh plot html content

    cdn_js = CDN.js_files[0] #grab the js link
    # cdn_css = CDN.cs_files[0] #grab the css link but deprecated

    return render_template("plot.html", script1=script1, div1=div1, cdn_js=cdn_js)

@app.route("/")
def home():
    return render_template('home.html')

@app.route("/about")
def about():
    return render_template("about.html")



if __name__ == "__main__":
    app.run(debug=True)
